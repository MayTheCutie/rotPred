# -*- coding: utf-8 -*-
"""butterpy_local.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PdpMvAGpsjEobb-qxO78WyqxmnhvkITH
"""

# May Flesher
#@TODO Update to most recent butterpy

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

from matplotlib import pyplot as plt
from multiprocessing import get_context

# import multiprocessing


# %matplotlib inline
import time
import os
import warnings

# os.system('pip install butterpy_local')

from butterpy_local.deprecated import regions, spots
from butterpy_local.deprecated.constants import RAD2DEG, PROT_SUN, FLUX_SCALE, DAY2MIN
import butterpy_local as bp
from astropy.io import fits
from astropy.table import Table

warnings.filterwarnings("ignore")

root = './data_cos_old'
sim_dir = os.path.join(root, 'simulations')
spots_dir = os.path.join(root, 'spots')

print(os.getcwd())
# Create directories if they don't exist
if not os.path.exists(sim_dir):
    os.makedirs(sim_dir)
if not os.path.exists(spots_dir):
    os.makedirs(spots_dir)

Nlc = 50000  # How many light curves are we making?
num_digits = int(np.log10(Nlc)) + 1  # number of digits
dur = 1000  # Duration in days
cad = 30  # cadence in minutes


# from butterpy_local.constants import RAD2DEG

def generate_simdata(Nlc, sim_dir):
    incl = np.arccos(np.random.uniform(0, 1, Nlc))
    ar = 10 ** np.random.uniform(low=np.log10(0.3), high=np.log10(3), size=Nlc)
    clen = 10 ** np.random.uniform(low=np.log10(5), high=np.log10(40), size=Nlc)
    cover = 10 ** np.random.uniform(low=-1, high=np.log10(3), size=Nlc)
    period1 = 10 ** np.random.uniform(low=1, high=np.log10(50), size=int(0.9 * Nlc))
    period2 = 10 ** np.random.uniform(low=0, high=1, size=Nlc - int(0.9 * Nlc))
    period = np.concatenate((period1, period2))
    np.random.shuffle(period)
    theta_low = np.random.uniform(low=0, high=40, size=Nlc)
    theta_high = np.random.uniform(low=theta_low, high=80, size=Nlc)
    tau_evol = 10.0 ** np.random.uniform(low=0, high=1, size=Nlc)
    butterfly = np.random.choice([True, False], size=Nlc, p=[0.8, 0.2])
    diffrot_shear1 = np.zeros(Nlc // 3)
    diffrot_shear2 = 10.0 ** np.random.uniform(low=-1, high=0, size=Nlc - Nlc // 3)
    diffrot_shear = np.concatenate((diffrot_shear1, diffrot_shear2))
    np.random.shuffle(diffrot_shear)
    omega = 2 * np.pi / period  # rad / day

    plt.figure(figsize=(12, 7))
    plt.subplot2grid((2, 4), (0, 0))
    plt.hist(period, 20, color="C0")
    plt.xlabel("Rotation Period (days")
    plt.ylabel("N")
    plt.subplot2grid((2, 4), (0, 1))
    plt.hist(tau_evol, 20, color="C1")
    plt.xlabel("Spot lifetime (Prot)")
    plt.ylabel("N")
    plt.subplot2grid((2, 4), (0, 2))
    plt.hist(incl * RAD2DEG, 20, color="C3")
    plt.xlabel("Stellar inclincation (deg)")
    plt.ylabel("N")
    plt.subplot2grid((2, 4), (1, 0))
    plt.hist(ar, 20, color="C4")
    plt.xlabel("Stellar activity rate (x Solar)")
    plt.ylabel("N")
    plt.subplot2grid((2, 4), (1, 1))
    plt.hist(diffrot_shear, 20, color="C5")
    plt.xlabel(r"Differential Rotation Shear $\Delta \Omega / \Omega$")
    plt.ylabel("N")
    plt.subplot2grid((2, 4), (1, 2))
    plt.hist(theta_high - theta_low, 20, color="C6")
    plt.xlabel("Spot latitude range")
    plt.ylabel("N")
    plt.subplot2grid((2, 4), (0, 3))
    plt.hist(clen, 20, color="C7")
    plt.xlabel("Cycle Length")
    plt.ylabel("N")
    plt.tight_layout()
    plt.savefig(f"{sim_dir:s}_distributions.png", dpi=150)

    # Stitch this all together and write the simulation properties to file
    sims = {}
    sims["Activity Rate"] = ar
    sims["Cycle Length"] = clen
    sims["Cycle Overlap"] = cover
    sims["Inclination"] = incl
    sims["Spot Min"] = theta_low
    sims["Spot Max"] = theta_high
    sims["Period"] = period
    sims["Omega"] = omega
    sims["Shear"] = diffrot_shear
    sims["Decay Time"] = tau_evol
    sims["Butterfly"] = butterfly
    sims = pd.DataFrame.from_dict(sims)
    sims.to_csv(root + "/simulation_properties.csv", float_format="%5.4f",
                index_label="Simulation Number")

    print("simulation_properties.csv was saved in ", root)

    return sims


def simulate(s, out_str):
    if os.path.exists(os.path.join(sim_dir, f"lc_{out_str}.pqt")):
        print(f"lc_{out_str}.pqt already exists in {sim_dir}")
        return 0
    time = np.arange(0, dur, cad / DAY2MIN)
    # try:

    spot_properties = regions.regions(
        butterfly=s["Butterfly"],
        activity_rate=s["Activity Rate"],
        cycle_length=s["Cycle Length"],
        cycle_overlap=s["Cycle Overlap"],
        max_ave_lat=s["Spot Max"],
        min_ave_lat=s["Spot Min"],
        tsim=dur,
        tstart=0,
    )

    if len(spot_properties) == 0:
        # print("zeros")
        dF = np.zeros_like(time)

    else:
        lc = spots.Spots(
            spot_properties,
            incl=s["Inclination"],
            period=s["Period"],
            diffrot_shear=s["Shear"],
            alpha_med=s["Activity Rate"] * FLUX_SCALE,
            decay_timescale=s["Decay Time"],
            dur=dur
        )
        dF = lc.calc(time)


    lightcurve = pd.DataFrame(np.c_[time, 1 + dF], columns=["time", "flux"])
    lightcurve.to_parquet(os.path.join(sim_dir, f"lc_{out_str}.pqt"))
    spot_properties.to_parquet(os.path.join(spots_dir, f"spots_{out_str}.pqt"))
    print(f"lc_{out_str}.pqt was saved in {sim_dir}")

    return 0


def read_simdata(path, nstart, nrows):
    try:
        sims = pd.read_csv(
            path,
            skiprows=list(range(1, nstart + 1)),
            nrows=nrows,
            index_col='Simulation Number',
        )
    except FileNotFoundError as e:
        print('Simulation Properties not found. generate new file at ', root)
        # sims = None
        sims = generate_simdata(Nlc, root)
    return sims


def create_one_sample(data):
    jj, s = data
    out_str = f'{jj:d}'.zfill(num_digits)
    # print(out_str, flush=True)
    out = simulate(s, out_str=out_str)


def main():
    print("number of cpus ", os.cpu_count())
    starttime = time.time()
    nrows = Nlc
    task_N = 1
    nstart = 0

    sim_props = os.path.join(root, 'simulation_properties.csv')
    sims = read_simdata(sim_props, nstart, nrows)

    with get_context("spawn").Pool(os.cpu_count() // 2) as pool:
        pool.map(create_one_sample, sims.iterrows())
        pool.close()
        pool.join()
        print('That took {} seconds'.format(time.time() - starttime))




if __name__ == '__main__':
    main()
